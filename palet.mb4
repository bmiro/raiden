''''''''''''''''''''''''Capçalera requerida a l'enunciat'''''''''''''''''''''''
def INTE GROC, BLANC, BLAU, VERMELL 
VERMELL = 1
BLANC = 2
GROC = 3
BLAU = 4

def INTE N 'veure variable pcsPila de la seccio de declaracions propies
N = 2
dim tipusP!(4) 'veure la variable TP de la seccio de declaracions propies
tipusP(1) = BLANC
tipusP(2) = BLAU
tipusP(3) = GROC
tipusP(4) = VERMELL

'coordenades x i y del punt P respecte la camera
def FLOAT oPx, oPy
oPx = 100.0
oPy = 530.0
'angle de rotació del palé respecte la camera
def FLOAT angle
angle = 0.0
'coordenades x i y de l’origen del sistema de la camera
def FLOAT cPx, cPy
cPx = 0.0
cPy = 0.0

''''''''''''''''''''''''     Macros pròpies     ''''''''''''''''''''''''
def INTE PINCA
PINCA = 1

def FLOAT DPALE 'Delay despres de haver munta tel pale
DPALE 4.0

def FLOAT DOPINCAI, DOPINCAF, DTPINCAI, DTPINCAF 'emps abans i despres per obrir/tancar pinça
DOPINCAI = 1.0 'Es important estar ben estatic el deixar
DOPINCAF = 0.5
DTPINCAI = 0.5
DTPINCAF = 0.5

def INTE VLENT, VNORMAL
VLENT = 5
VNORMAL = 20

def FLOAT ZS, ZTPT, ZTPR 'Pla Z on es desplaça el robot per sobre de la terra _real_
ZS = 280.0
ZTPT = ZS - 6.0 ' Pla de terra amb pinça tombada
ZTPR = ZS + 6.5  ' Pla de terra amb pinça recta


def INTE TP 'tipus de pença diferents
TP = 4

def INTE PILES 'Numero de pilaes inicials on hi ha les peces
PILES = 2

def INTE PCSPILA 'numero de peces de cada pila
PCSPILA = N

def INTE PALS 'Numero de pals
PALS = 3

def FLOAT DT 'Diferencial de temps per la pinça
DT = 0.5

def FLOAT HDISC 'Altura dels discs
HDISC = 8.5

'TODO documentar cap on intrementen les x i tot l'entorn, premises de colocacio etc.
def FLOAT DXPILES 'Distancia X entre les pilaes
DXPILES = 95.0
def FLOAT DYPILES 'Distancia Y entre les pilaes
DYPILES = 0.0
def FLOAT DXPALE  'Distancia X entre els punts del pale
DXPALE  = 110.0
def FLOAT DYPALE  'Distancia Y entre els punts del pale
DYPALE = 110.0
def FLOAT DXPALS  'Dinstancia X entre els pals
DXPALS  = 70.0
def FLOAT DYPALS  'Dinstancia Y entre els pals
DYPALS  = 0.0
def FLOAT DZPAL   'Dinstancia Z per entrar dins el pal
DZPAL  = 70.0

dim RELPALE# (4,2) '4 = TP, posicions relatives al centre per fer el palé (x, y)
RELPALE (1,1) = -55.0 
RELPALE (1,2) =  55.0
RELPALE (2,1) =  55.0 
RELPALE (2,2) =  55.0
RELPALE (3,1) =  55.0 
RELPALE (3,2) = -55.0
RELPALE (4,1) = -55.0 
RELPALE (4,2) = -55.0 

''''''''''''''''''''''''     Declaracions pròpies     ''''''''''''''''''''''''
dim npcsPila!(2) '2 = PILES
npcsPila(1) = N
npcsPila(2) = N

dim ordre!(4) '4 = TP Ordre de recollida de les peces

dim alloc!(4) '4 = TP Tantes posicions com tipus de peça, les peces que ja estan a lloc

def POS Prvsnl 'Punt Provisional per calcul

dim Pale(4) '4 = TP, posicio segura sobra la columna d'on s'ha de posar la peça
dim PaleOut(4)
dim Pila(2) '2 = PILES posicio segura sobre la pila
dim PalI(4) ' 3 = PALS
dim PalF(4) ' 3 = PALS

def INTE i, pil, pal, munt, peca, pecapila, tipus 'iteradors

def FLOAT ppx, ppy 'punt pale  ' emprats com a paramentres per el pals de 
def FLOAT prx, pry 'punt robot ' coorenades del pale al robot

''''''''''''''''''''''''''''''''''   MAIN   '''''''''''''''''''''''''''''''''''
gosub *INIT
gosub *CALCPTS
gosub *MNTPALE
dly DPALE
gosub *DESPALE
gosub *ACABA
end

''''''''''''''''''''''''''''''''    RUTINES   '''''''''''''''''''''''''''''''''
*INIT
    servo ON
    ovrd VNORMAL
    mov Paralisi
    gosub *OPINCA
    for i = 1 to TP + 1
        alloc(i) = 0
    next
    return

*CALCPTS
    for pil = 1 to PILES + 1
        Pila(pil) = Pila0
        Pila(pil).x = Pila(1).x + DXPILES * (pil - 1)
        Pila(pil).y = Pila(1).y + DYPILES * (pil - 1) 'es 0
    next
    
    for tipus = 1 to TP + 1 
        ppx = RELPALE(tipus, 1) 'paramentres de entrada de CAM2ROB
        ppy = RELPALE(tipus, 2)
        gosub *CAM2ROB           'prx i pry son parametres de sortida
        Pale(tipus) = Pale0    'Escriu altres components i orientacions
        Pale(tipus).x = prx
        Pale(tipus).y = pry
        PaleOut(tipus) = PaleOut0
        PaleOut(tipus).x = prx
        PaleOut(tipus).y = pry
    next
    
    select angle
    case 45.0 to 135.0
        ordre(1) = 3
        ordre(2) = 4
        ordre(3) = 1
        ordre(4) = 2
    case 135.0 to 225.0
        ordre(1) = 4
        ordre(2) = 2
        ordre(3) = 3
        ordre(4) = 1
    case 225.0 to 315.0
        ordre(1) = 2
        ordre(2) = 1
        ordre(3) = 4
        ordre(4) = 3
    default ' 315.0 > angle < 45.0
        ordre(1) = 1
        ordre(2) = 3
        ordre(3) = 2
        ordre(4) = 4
    end select
    
    for pal = 1 to PALS
        PalI(pal) = Pal0
        PalI(pal).x = PalI(pal).x + DXPALS * (pal - 1)
        PalI(pal).y = PalI(pal).y + DYPALS * (pal - 1)
        PalF(pal) = PalI(pal)
        PalF(pal).z = PalF(pal).z - DZPAL
    next
    return

*ACABA
    mov Paralisi
    hopen PINCA
    servo OFF
    return

*CAM2ROB
    prx = ppx*sin(angle) + ppy*cos(angle) + oPy + cPx
    pry = ppx*cos(angle) - ppy*sin(angle) + oPx + cPy
    return
    
*OPINCA
    dly DOPINCAI
    hopen PINCA
    dly DOPINCAF
    return

*TPINCA
    dly DTPINCAI
    hclose PINCA
    dly DTPINCAF
    return

*MNTPALE
    peca = 1
    for pil = 1 to PILES 
        for pecapila = 1 to PCSPILA
            gosub *AGAFPILA
            gosub *POSAPALE
            peca = peca + 1
        next
    next
    return
    
*DESPALE
    for tipus = 1 to TP
        munt = ordre(tipus)
        while peca <= alloc(munt)
            gosub *AGAFPALE
            gosub *POSADEST
        wend
    next
    return

*AGAFPILA
    mov Pila(pil)
    Prvsnl = Pila(pil)
    Prvsnl.z = Prvsnl.z - ZTPR + (npcspila!(pil) - pecapila) * HDISC
    ovrd VLENT
    mvs Prvsnl
    gosub *TPINCA
    mvs Pila(pil)
    ovrd VNORMAL
    return

*POSAPALE
    mov Pale(tipusP(peca))
    Prvsnl = Pale(tipusP(peca))
    Prvsnl.z = Prvsnl.z - ZTPR + alloc(tipusP(peca)) * HDISC
    ovrd VLENT
    mvs Prvsnl
    gosub *OPINCA
    mvs Pale(tipusP(peca))
    ovrd VNORMAL
    alloc(tipusP(peca)) = alloc(tipusP(peca)) + 1
    return

*AGAFPALE
    mov PaleOut(munt)
    Prvsnl = PaleOut(munt)
    Prvsnl.z = Prvsnl.z - ZTPT + (alloc(munt) - 1) * HDISC
    ovrd VLENT
    mvs Prvsnl
    gosub *TPINCA
    mvs PaleOut(munt)
    ovrd VNORMAL
    alloc(munt) = alloc(munt) - 1
    return

*POSADEST
    if (tipus < TP) then 'Agafam les 3 primeres
       mov PalI(munt)
       ovrd VLENT
       mvs PalF(munt)
       gosub *OPINCA
       mvs PalI(munt)
       ovrd VNORMAL
    else
       mov Paralisi
       gosub *OPINCA
    endif
    return