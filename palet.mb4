''''''''''''''''''''''''Capçalera requerida a l'enunciat'''''''''''''''''''''''
def INTE GROC, BLANC, BLAU, VERMELL 
GROC = 1
BLANC = 2
BLAU = 3 
VERMELL = 4

def INTE N 'veure variable pcsPila de la seccio de declaracions propies
N = 2
dim tipusP!(4) 'veure la variable TP de la seccio de declaracions propies
tipusP!(1) = GLANC
tipusP!(2) = BLAU
tipusP!(3) = GROC
tipusP!(4) = VERMELL

'coordenades x i y del punt P respecte la camera
def FLOAT oPx, oPy
oPx = 100.0
oPy = 530.0
'angle de rotació del palé respecte la camera
def FLOAT angle
angle = 0.0
'coordenades x i y de l’origen del sistema de la camera
def FLOAT cPx, cPy
cPx = 0.0
cPy = 0.0

''''''''''''''''''''''''     Macros pròpies     ''''''''''''''''''''''''
def INTE PINCA
PINCA = 1

def FLOAT ZS 'Pla Z on es desplaça el robot per sobre de la terra _real_
ZS = 280.0 + 6.5

def INTE TP 'tipus de pença diferents
TP = 4

def INTE PILES 'Numero de pilaes inicials on hi ha les peces
PILES = 2

def INTE PCSPILA 'numero de peces de cada pila
PCSPILA = N

def INTE PALS 'Numero de pals
PALS = 3

def FLOAT DT 'Diferencial de temps per la pinça
DT = 0.5

def FLOAT HDISC 'Altura dels discs
HDISC = 8.5

'TODO documentar cap on intrementen les x i tot l'entorn, premises de colocacio etc.
def FLOAT DXPILES 'Distancia X entre les pilaes
DXPILES = 95.0
def FLOAT DYPILES 'Distancia Y entre les pilaes
DYPILES = 0.0
def FLOAT DXPALE  'Distancia X entre els punts del pale
DXPALE  = 110.0
def FLOAT DYPALE  'Distancia Y entre els punts del pale
DYPALE = 110.0
def FLOAT DXPALS  'Dinstancia X entre els pals
DXPALS  = 70.0
def FLOAT DYPALS  'Dinstancia Y entre els pals
DYPALS  = 0.0
def FLOAT DZPAL   'Dinstancia Z per entrar dins el pal
DZPAL  = 35.0

dim RELPALE# (4,2) '4 = TP, posicions relatives al centre per fer el palé (x, y)
RELPALE# (1,1) =  55.0 'Primer quadrant
RELPALE# (1,2) =  55.0
RELPALE# (2,1) = -55.0 'Segon quadrant
RELPALE# (2,2) =  55.0
RELPALE# (3,1) = -55.0 'Tercer quadrant
RELPALE# (3,2) = -55.0
RELPALE# (4,1) =  55.0 'Quart quadrant
RELPALE# (4,2) = -55.0 

''''''''''''''''''''''''     Declaracions pròpies     ''''''''''''''''''''''''
dim npcsPila!(2) '2 = PILES
ncpcsPila(1) = N
ncpcsPila(2) = N

dim alloc!(4) '4 = TP Tantes posicions com tipus de peça, les peces que ja estan a lloc

def POS Prvsnl 'Punt Provisional per calculs

dim Pale(4) '4 = TP, posicio segura sobra la columna d'on s'ha de posar la peça
dim PaleOut(4)
dim Pila(2) '2 = PILES posicio segura sobre la pila
dim PalI(3) ' 3 = PALS
dim PalF(3) ' 3 = PALS

def INTE i, pil, pal, munt, peca, pecapila, tipus 'iteradors

def FLOAT ppx, ppy 'punt pale  ' emprats com a paramentres per el pals de 
def FLOAT prx, pry 'punt robot ' coorenades del pale al robot

''''''''''''''''''''''''''''''''''   MAIN   '''''''''''''''''''''''''''''''''''
gosub *INIT
gosub *CALCPTS
gosub *MNTPALE
gosub *DESPALE
gosub *ACABA
end

''''''''''''''''''''''''''''''''    RUTINES   '''''''''''''''''''''''''''''''''
*INIT
    servo ON
    ovrd 10
    mov Paralisi
    hopen PINCA
    i = 1
    while (i < TP + 1)
        alloc!(i) = 0
        i = i + 1
    wend
    return

*CALCPTS
    Pila(1) = Pila00
    pil = 1
    while (pil < PILES + 1)
        Pila(pil).x = Pila(1).x + DXPILES * (pil - 1)
        Pila(pil).y = Pila(1).y + DYPILES * (pil - 1) 'es 0
        pil = pil + 1
    wend
    
    tipus = 1
    while (tipus < TP + 1)
        ppx = RELPALE#(tipus, 1) 'paramentres de entrada de CAM2ROB
        ppy = RELPALE#(tipus, 2)
        gosub *CAM2ROB           'prx i pry son parametres de sortida
        Pale(tipus) = Pale00    'Escriu altres components i orientacions
        Pale(tipus).x = prx
        Pale(tipus).y = pry
        if (tipus < TP/2 + 1) then 'Sols dos pals accesibles agafant des de damunt
            PaleOut(tipus) = Pale00
        else
            PaleOut(tipus) = PalePT 'Pinça tombada
        endif
        PaleOut(tipus).x = prx
        PaleOut(tipus).y = pry
        tipus = tipus + 1
    wend
      
    pal = 1
    PalI(1) = Pal00
    while (pal < PALS + 1)
        PalI(pal).x = PalI(1).x + DXPALS * (pal-1)
        PalI(pal).y = PalI(1).y + DYPALS * (pal-1)
        PalF(pal) = PalI(pal)
        PalF(pal).z = PalF(pal).z - DZPAL
        pal = pal + 1
    wend
    return

*ACABA
    mov Paralisi
    hopen PINCA
    servo OFF
    return

*CAM2ROB
    prx = ppx*sin(angle) + ppy*cos(angle) + oPy + cPx
    pry = ppx*cos(angle) - ppy*sin(angle) + oPx + cPy
    return

*MNTPALE
    pil = 1
    peca = 1
    while (pil < PILES + 1)
        pecapila = 1
        while (pecapila < PCSPILA + 1)
            gosub *AGAFPILA
            gosub *POSAPALE
            pecapila = pecapila + 1
            peca = peca + 1
        wend
        pil = pil + 1
    wend
    return
    
*DESPALE
    tipus = 1
    while (tipus < TP + 1)
        peca = 1
        while (peca < alloc!(tipus) + 1)
            gosub *AGAFPALE
            gosub *POSADEST
            peca = peca + 1
        wend
        tipus = tipus + 1
    wend
    return

*AGAFPILA
    mov Pila(pil)
    Prvsnl = Pila(pil)
    Prvsnl.z = Prvsnl.z - ZS + (npcspila!(pil) - pecapila) * HDISC
    mvs Prvsnl
    hclose PINCA
    dly DT
    mvs Pila(pil)
    return

*POSAPALE
    mov Pale(tipusP!(peca))
    Prvsnl = Pale(tipusP!(peca))
    Prvsnl.z = Prvsnl.z - ZS + alloc!(tipusP!(peca)) * HDISC
    mvs Prvsnl
    hopen PINCA
    dly DT
    mvs Pale(tipusP!(peca))
    alloc!(tipusP!(peca)) = alloc!(tipusP!(peca)) + 1
    return

*AGAFPALE
    mov PaleOut(tipusP!(peca))
    Prvsnl = PaleOut(tipusP!(peca))
    Prvsnl.z = Prvsnl.z - ZS + alloc!(tipusP!(peca)) * HDISC
    mvs Prvsnl
    hclose PINCA
    dly DT
    mvs PaleOut(tipusP!(peca))
    alloc!(tipusP!(peca)) = alloc!(tipusP!(peca)) - 1
    return

*POSADEST
    if (tipus < TP) then
       mov PalI(tipus)
       mvs PalF(tipus)
       hopen PINCA
       dly DT
       mvs PalI(tipus)
    else
       mov Paralisi
       hopen PINCA
       dly DT
    endif
    return